// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Prisma schema for PayrollPro demo backend (SQLite)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  username      String   @unique
  email         String   @unique
  passwordHash  String
  role          String   @default("employee")
  fullName      String
  phone         String?
  department    String?
  employeeId    String   @unique
  lastLoginAt   DateTime?
  // 2FA
  twoFAEnabled  Boolean  @default(false)
  twoFASecret   String?
  recoveryCodes RecoveryCode[]
  // relations
  sessions      Session[]
  payrolls      PayrollEntry[]
  trades        Trade[]
  whatIfSessions WhatIfSession[]
  auditLogs     AuditLog[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Session {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  userAgent   String?
  ipAddress   String?
  createdAt   DateTime @default(now())
  lastActive  DateTime @default(now())
}

model RecoveryCode {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  code      String   @unique
  usedAt    DateTime?
  createdAt DateTime @default(now())
}

model PayrollEntry {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  periodStart  DateTime
  periodEnd    DateTime
  baseSalary   Int      // cents
  bonus        Int      // cents
  deductions   Int      // cents
  netPay       Int      // cents
  createdAt    DateTime @default(now())
}

model Trade {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  asset      String
  quantity   Float  // positive buy, negative sell
  priceUsd   Float
  feeUsd     Float   @default(0)
  executedAt DateTime
  createdAt  DateTime @default(now())
}

model WhatIfSession {
  id         String   @id
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  method     String
  summaryJson String
  createdAt  DateTime @default(now())
}

model AuditLog {
  id         String   @id @default(cuid())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  action     String
  metaJson   String
  timestamp  DateTime @default(now())
}
